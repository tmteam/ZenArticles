<div style="text-align: right; font-style: italic"> Давным-давно, в одной неизвестной вам конторе... </div>
<br/>
<img src ="https://github.com/tmteam/ZenArticles/raw/master/HelloWorld/img/IntroV2.png?raw=true" style="width: 70%; display: block; margin: 0 auto;"/>



Команде **А** потребовалось разработать новый мини-сервис на .netCore.

Болванка для такого сервиса включала:

- Naming
- Логировку
- Сбор метрик
- Связь по шине RabbitMq
- Работу через ORM efCore
- Тестовые проекты
- Git-репозиторий
- Сборку докер контейнера
- Настройку деплоя сервиса на TeamCity

Теперь проект был готов к написанию бизнес логики.
С этой задачей команда **А** справились где-то за 10 человеко-часов (с перекурами). Долго, скажете вы?

Относительно.

 Соседняя команда **Б**, со схожей задачей справилась за 10 человеко-дней и жутко по этому поводу расстроилась.

Боги Агила требовали ретроспективы. Ретроспектива требовала решений. Решение команды **Б** заключалось в том, что нужен проект-пример или проект-шаблон на основание (или на примере) которого можно быстро стартовать разработку новых микросервисов с использованием RabbitMq, логировки, карточных игр и женщин.

Боги бюрократии не могли пропустить такой прекрасный шанс и назначили ответственного за этот важный для нашей компании проект. Затем эти боги собрали круглый стол, на который были приглашены **6** сеньоров, **3** тех. лида, **2** нач. отдела и **1** главный архитектор.

90 минут все эти ребята и девчата ожесточенно обсуждали что и в каком виде должно присутствовать в этом проекте-примере. Шаблон или проект? T4 это Дно или Ил? Что мы будем делать когда нагрузка вырастет в 5 раз, и как вообще это относится к теме обсуждения.

Главным же результатом совещания стало название проекта - "HelloWorld на максималках". 

Теперь я с гордостью могу огласить вам эмпирический факт:

**"Для создания архитектуры современного HelloWorld приложения в неназванной компании потребовалось 10 разработчиков и два начальника отдела".**

<img src ="https://icon-icons.com/icons2/602/PNG/512/Facepalm_icon-icons.com_55913.png" alt="Ох..." style="width: 40%; display: block; margin: 0 auto;"/>

<div style="font-size: 20px;  font-style: bold"">15 человеко-часов.</div>


<img src ="https://hsto.org/getpro/habr/comment_images/1de/195/cc4/1de195cc46aef03ba2c6e36ad3868aab.png" alt="Ох..." style="width: 60%; display: block; margin: 0 auto;"/>
<br/>
<br/>
<div style="font-size: 28px;  font-style: bold"">Два человеко-дня</div>
<br/>
<img src ="https://st.peopletalk.ru/wp-content/uploads/2016/11/1478166260-1024x534.jpg" alt="Ох..." style="width: 80%; display: block; margin: 0 auto;"/>
<br/>

## Зачем

Оставим пространственно временные разборки на совести управленцев. Попробуем лучше понять в чем же ништяки HelloWorld и почему это в итоге должно быть весело:

- Создаем репозиторий с этим "типовым" проектом. Каждый новый коммит в нем будет новой идеей или улучшением предыдущих.
- Каждая ветка в этом репозитории будет результатом заруб и экспериментов. Песочницей идей.
- Новых членов команды можно направлять в этот репозиторий на "рефакторинг", в процессе которого они изучат наши библиотеки и подходы с одной стороны, и привнесут свои идеи и опыт с другой.
- Этот репозиторий будет центральным хелпом по использованию всех наших локальных нагет библиотек.
- При исправлении багов в пакетах из локальных нагетов - все получают обновления, за счет более частого использования нагета.
- Команды будут обмениваться своими удачными решениями. Уменьшится количество велосипедов по незнанию.
- Повышение мотивации сотрудников в следствие обмена опытом и наличия песочницы
- Себя посмотреть, других показать.

## С чего начать

1) Создаем отдельный гит-репозиторий для HelloWorld решения.

2) HelloWorld запускается, содержит в себе по крайней мере один end-point. Он может делать что-то вроде выдачи прогноза погоды или говорить когда на кухню подвезли печеньки.

3) На первой стадии мы подключаем туда только нашу логировку, сбор метрик, Http-client (для связи с внешним каким нибудь сервисом), RabbitMq. Каждую строчку тщательно комментируем.

4) Настраиваем деплой виндоус сервиса, а также в докер.

5) С течением времени накручиваем новую функциональность.

6) Начинаем баталии в гите, с предложениями по улучшениям, и выдергиванию сложных и инкапсулированных кусков кода в локальные Nuget пакеты, например систему аутентификации, сборку метрик и. т. д.

7) Новые члены команд первым делом должны провести ревью/рефакторинг HelloWorld проекта и предложить улучшения, ну или просто ознакомиться.


<div style=" font-style: italic"> Cтоит отметить что подобное решение подойдет тогда, когда команды самоорганизуются, а у программистов горят глаза. Ну или хотя бы тлеют. </div>