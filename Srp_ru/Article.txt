Srp

Single responsibility principle(принцип единой ответственности),   

Первое серьезное знакомство с этим приницпом  состоялось для меня в начале первого курса, когда молодых и зеленых Нас вывезли в лес, что бы сделать из личинок студентов -  студентов настоящих.

В лесу нас разделили на группы, по 8-9 человек в каждой и устроили соревнование - какая группа быстрее выпьет бутылку водки, при условии что первый человек из группы наливает водку в стакан, второй выпивает, а третий закусывает. Выполнивший свою операцию юнит встает в конец очереди группы. 

Случай, когда размер очереди был кратен 3 и являлся хорошей реализацией Srp. (Стоит отметить что юнит, чей номер в очереди  был равен 3*N+1 получал дозу паразитного состояния и излишне высокую связанность, но в этом посту мы не будем поднимать эти технические проблемы)

Определение 1. Единая ответственность.

Итак. Официальное определение принципа единой ответственности (SrP) говорит о том что у каждого объекта есть cвоя ответственность и причина существования и эта ответственность у него только одна.

Рассмотрим объект "Выпивоха" (tippler).  
Для выполнения приницпа SRP разделим обязанности на троих: 
- Один наливает   (PourOperation)
- Один выпивает   (DrinkUpOperation)
- Один закусывает (TakeBiteOperation)

Каждая из участников процесс ответсвенен за одну компоненту процесса, тоесть имеет одну атомарную ответственность - Выпить, налить или закусить. 

Выпивоха же, в свою очередь является фасадом для данных операций:

сlass TipplerSrp {
   	//...
	void Do(){
		_pourOperation.Do() // налить
		_drinkUpOperation.Do() // выпить
		_takeBiteOperation.Do() // закусить
	}
}

Что дает такое разделение? Во-первых код предельно ясен. Вы можете показать этот код менеджеру или вашей подружке, и они скажут "ну это же очевидно".

Во вторых - выпивоха теперь композиционнен. Вы можете заменить _drinkUpOperation на операцию, в которой вы выливаете жидкость под стол. Или заменить операцию наливания, на операцию, в которой вы мешаете вино и воду или водку и пиво. В зависимости от требований бизнеса вы можете все, при этом не трогая код метода Tippler.Act

В конце концов - из этих операций вы можете сложить обжору ( используя только _takeBitOperation), Алкоголика (используя только _drinkUpOperation напрямую из бутылки) и удовлетворить многие другие требования бизнесса.

Определение 2. Eдиная изменчивость.

Позвольте господа! Класс выпивохи же также выполняет единую ответсвенность - он выпивает! И вообще слово "ответственность" - понятие крайне размытое. Кто то ответственен за судьбу человечества, а кто то ответсвенен за поднимание опрокинутых на полюсе пингвинов.

Рассмотрим две реализации выпывохи. Первая, указанная выше, содержит в себе три класса - Налить, выпить и закусить.

Вторая, написана через методологию "Вперед и только вперед" и содержит всю логику в методе Act:


сlass TipplerBrutForce {
	//...
	void Act(){
		// наливаем
		if(!_hand.TryDischarge(from: _bottle, to: _glass, size: _glass.Capacity))
			throw new OverdrinkException();

		// выпиваем
		if(!_hand.TryDrink(from: _glass,  size: _glass.Capacity))
			throw new OverdrinkException();

		//Закусываем
		for(int i = 0; i< 3; i++){
			var food = _foodStore.TakeOrDefault();
			if(food==null)
				throw new FoodIsOverException();
			
			_hand.TryEat(food);
			return;
		}
		throw new OverdrinkException();
	}
}

Оба этих класса,  с точки зрения стороннего наблюдателя, выглядят абсолютно одинаково и выполняют единую ответственность "выпить". 

Конфуз!

Тогда мы лезем в интернет и узнаем другое определение SRP - Приницп единой изменчивости.

SCP гласит что "у модуля есть один и только один повод для изменения".

Теперь все встает на свои места. Отдельно можно изменять процедуры наливания, выпивания и закусывания, а в самом выпивохе мы можем поменять только последовательность операций, например переместив закуску перед выпиванием или добавив чтение тоста.

В подходе "Вперед и только вперед" же, все что можно поменять - меняется только в методе Act. Это может быть читабельно, в случае когда логики немного и она редко меняется, но зачастую это кончается ужасными методами по 500 строк в каждом, с количеством if -ов большим чем требуется для вступления России в нато. 

Определение 3. Локализация изменений.

Выпивохи часто не понимают почему они проснулись в чужой квартире, или где их мобильный. Пришло время добавить подробную логировку.

Начнем логировку с процесса наливания:

class PourOperation: IOperation{
	PourOperation(ILogger log /*....*/){/*...*/}
	//...
	void Act(IHand){
		_log.Log($"Before pour with {_hand} and {_bottle}");
		//...
		_log.Log($"After pour with {_hand} and {_bottle}");
	}
}

Инкапсулировав ее в PourOperation мы поступили мудро, с точки зрения ответственности и  инкапсуляции, но вот с принципом изменчивости у нас теперь конфуз. Помимо самой операции которая может меняться, изменчивой становится и сама логировка. Придется отделять и делать специальный логировщик для операции наливания:

interface IPourLogger{
	void LogBefore(IHand, IBottle){}
	void LogAfter(IHand, IBottle){}
	void OnError(IHand, IBottle, Exception){}
}

class PourOperation: IOperation{
	PourOperation(IPourLogger log /*....*/){/*...*/}
	//...
	void Act(IHand){
		_log.LogBefore(_hand, _bottle);
		try{
		//... operation
		_log.LogAfter(_hand, _bottle");
		}
		catch(exception e){
			_log.OnError(_hand, _bottle, e)
		}
	}
}

Дотошный читатель заметит, что LogAfter, LogBefore и OnError - также могут меняться по отдельности и по аналогии с предыдущими действиями создаст три класса: PourLoggerBefore, PourLoggerAfter и PourErrorLogger.

А вспомнив, что операций для выпивохи три - получаем девять классов логирования. В итоге весь выпивоха состоит из 14 (!!!) классов. На этом моменте многие приходят к выводу, что SRP это сказки из розовых королевстви и уйдудт вить лапшу...

... так и не узнав о существовании третьего определения Srp: 

"Приницп единой ответственности гласит что схожие для изменения вещи должны храниться в одном месте". Тоесть если мы меняем логировку операции то мы должны это менять в одном месте.

И это определение резко все упрощает. Помимо того, что не надо дробить логировщик IPourLogger на три класса, мы также можем объеденить все логировщики!

class OperationLogger{
	public OperationLogger(string operationName){/*..*/}
	public void LogBefore(params object[] args){/*...*/}		
	public void LogAfter(params object[] args){/*..*/}
	public void LogError(params object[] args, exception e){/*..*/}
}

Теперь у нас есть 5 классов для решения задачи выпивания:

- Класс операции наливания
- Класс операции выпивания
- Класс операции заедания
- Класс логировки
- Класс фасада выпивохи


Каждый из них отвечает строго за одну функциональность, имеет одну причину для изменения. Все схожие для изменения правила лежат рядом.



Для тех кто все пролистал и хочет выводов.

SRP это приницп проектирования, при котором 
- Каждый модуль(класс или метод) имеет только один повод для изменения. 
- Атомарные изменения в исходной задачи локализованны в одном модуле.

При этом определение "ответственности" следует из этих двух определений:
- Ответственность модуля это потенциальные изменения имплементированных в нем бизнесс-правил.

Ничего не понятно? Зато как на собеседованиях роляет!



Post scriptum:

Кто то придет и скажет что 5 классов в нашем примере это очень много. Специально для этих людей я написал код выпивохи в одном методе. Требования: не сломав старый функционал нужно добавить возможность говорить тосты. Наслаждайтесь, и не говорите что у вас такого кода нет ^^:

сlass Tippler {
	//...
	void Act(){
		_log.WriteDebug("Before tripple ");
		var tripplerStopwatch = Stopwatch.Start();
		try
		{
			_log.WriteDebug("Before pour with {_bottle}");
			var pourStopwatch = Stopwatch.Start();
			try{
				if(!_hand.TryDischarge(from: _bottle, to: _glass, size: _glass.Capacity))
					throw new OverdrinkException();
				_log.WriteDebug("Finish pour with {_bottle} in {pourStopwatch.TotalMilliseconds}");
			}
			catch(Exception e){
				_log.WriteError("Pour error {e} with bottle {_bottle} in {pourStopwatch.TotalMilliseconds}")
				throw;
			}	
			pourStopwatch.Stop();

			_log.WriteDebug("Before drink with {_bottle}");
			var drinkStopwatch = Stopwatch.Start();
			try{
				if(!_hand.TryDrink(from: _glass,  size: _glass.Capacity))
					throw new OverdrinkException();
				_log.WriteDebug("Finish drink with {_bottle} in {pourStopwatch.TotalMilliseconds}");
			}
			catch(Exception e){
				_log.WriteError("Drink error {e} with bottle {_bottle} in {drinkStopwatch.TotalMilliseconds}")		
				throw;
			}
			
			try{
				_log.WriteDebug("Before TakeBite.");
				var takeBiteStopwatch = Stopwatch.Start();

				for(int i = 0; i< 3; i++){
					var food = _foodStore.TakeOrDefault();
					if(food==null)
						throw new FoodIsOverException();
				
					_hand.TryEat(food);
					_log.WriteDebug("finish TakeBite in {takeBiteStopwatch.TotalMilliseconds}");
					return;
				}

				throw new OverdrinkException();
			}
			catch(Exception e){
				_log.WriteError("Error TakeBite {e.Message} in {takeBiteStopwatch.TotalMilliseconds}");
				throw;
			}
			_log.WriteDebig("Finish tripple in {tripple.TotalMilliseconds}")
		}
		catch(Exception e){
			_log.WriteError("Error Trippler {e.Message} in (tripple.TotalMillisecons) )
		}
	}
}
